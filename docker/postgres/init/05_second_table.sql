\c db2markdown db2markdownuser

-- =========================
-- 基礎表：customers / products
-- =========================

-- 顧客
CREATE TABLE IF NOT EXISTS second_schema.customers (
    customer_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(100)      NOT NULL,
    email        VARCHAR(100)      NOT NULL UNIQUE,
    created_at   TIMESTAMP         NOT NULL DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE  second_schema.customers IS '顧客資料表';
COMMENT ON COLUMN second_schema.customers.customer_id IS '顧客 ID（主鍵）';
COMMENT ON COLUMN second_schema.customers.name        IS '顧客名稱';
COMMENT ON COLUMN second_schema.customers.email       IS '顧客電子郵件（唯一）';
COMMENT ON COLUMN second_schema.customers.created_at  IS '建立時間';

-- 商品
CREATE TABLE IF NOT EXISTS second_schema.products (
    product_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(100)      NOT NULL,
    price        NUMERIC(10,2)     NOT NULL CHECK (price >= 0),
    stock        INTEGER           NOT NULL DEFAULT 0 CHECK (stock >= 0),
    created_at   TIMESTAMP         NOT NULL DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE  second_schema.products IS '商品資料表';
COMMENT ON COLUMN second_schema.products.product_id IS '商品 ID（主鍵）';
COMMENT ON COLUMN second_schema.products.name       IS '商品名稱';
COMMENT ON COLUMN second_schema.products.price      IS '價格（>= 0）';
COMMENT ON COLUMN second_schema.products.stock      IS '庫存數量（>= 0）';
COMMENT ON COLUMN second_schema.products.created_at IS '建立時間';

-- 索引
CREATE INDEX IF NOT EXISTS idx_products_name
    ON second_schema.products(name);

CREATE INDEX IF NOT EXISTS idx_customers_email
    ON second_schema.customers(email);

-- =========================
-- 訂單與明細：orders / order_items
-- =========================

-- 訂單
CREATE TABLE IF NOT EXISTS second_schema.orders (
    order_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id  INTEGER   NOT NULL,
    status       VARCHAR(20) NOT NULL DEFAULT 'NEW'
    CHECK (status IN ('NEW','PAID','CANCELLED','FULFILLED','REFUNDED')),
    order_time   TIMESTAMP   NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_orders_customer
    FOREIGN KEY (customer_id)
        REFERENCES second_schema.customers(customer_id)
        ON DELETE CASCADE
);
COMMENT ON TABLE  second_schema.orders IS '訂單主檔';
COMMENT ON COLUMN second_schema.orders.status IS '狀態（NEW/PAID/CANCELLED/FULFILLED/REFUNDED）';

CREATE INDEX IF NOT EXISTS idx_orders_customer_id
    ON second_schema.orders(customer_id);
CREATE INDEX IF NOT EXISTS idx_orders_status
    ON second_schema.orders(status);

-- 訂單明細
CREATE TABLE IF NOT EXISTS second_schema.order_items (
    order_id     INTEGER NOT NULL,
    product_id   INTEGER NOT NULL,
    quantity     INTEGER NOT NULL CHECK (quantity > 0),
    unit_price   NUMERIC(10,2) NOT NULL CHECK (unit_price >= 0),
    PRIMARY KEY (order_id, product_id),
    CONSTRAINT fk_oi_order
    FOREIGN KEY (order_id)
    REFERENCES second_schema.orders(order_id)
    ON DELETE CASCADE,
    CONSTRAINT fk_oi_product
    FOREIGN KEY (product_id)
        REFERENCES second_schema.products(product_id)
    ON DELETE RESTRICT
);
COMMENT ON TABLE second_schema.order_items IS '訂單品項明細（每筆一種商品）';
COMMENT ON COLUMN second_schema.order_items.unit_price IS '下單當下單價（歷史鎖價）';

CREATE INDEX IF NOT EXISTS idx_order_items_product_id
    ON second_schema.order_items(product_id);

-- 付款
CREATE TABLE IF NOT EXISTS second_schema.payments (
    payment_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id     INTEGER   NOT NULL,
    amount       NUMERIC(12,2) NOT NULL CHECK (amount >= 0),
    method       VARCHAR(20)   NOT NULL CHECK (method IN ('CARD','CASH','TRANSFER','WALLET')),
    paid_at      TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_payments_order
    FOREIGN KEY (order_id)
        REFERENCES second_schema.orders(order_id)
        ON DELETE CASCADE
);
COMMENT ON TABLE second_schema.payments IS '付款紀錄';

CREATE INDEX IF NOT EXISTS idx_payments_order_id
    ON second_schema.payments(order_id);
